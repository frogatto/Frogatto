{
id: "moth_boss",
zorder: "@include data/zorder.cfg:in_front_of_parallax_objects",
prototype: ["hittable"],
mass: 5,
friction: 5000,
traction: 1000,
traction_in_air: 1000,
has_feet: false,
hitpoints: 100,

solid_dimensions: ["enemy","common"],
always_active: true,
on_wingflap: "sound_falloff('moth-boss-wing-flap'+1d5+'.wav',500,1.0)",
properties: {
	custom_damage_table: "{
		enum neutral: 1.0,
		enum fire: 0.0,
		enum energy: 0.1,
		enum arcane: 0.0,
		enum acid: 1.0,
		enum impact: 1.0,
		enum impale: 1.0,
		enum lacerate: 1.0
	}",
	
	attack_damage: "1",
	team: "'evil'",
	hurt_velocity_y: "0",
	hurt_velocity_x: "0",
	
	title: "~Moth Boss~",
	description: "~Could totally take Godzilla in a fight!~",
	taste: "~Dusty and musty and old.~",
	
	uninterruptible_animations: "[string] :: ['turn']",
	change_action_cooldown_time: "20",
	timeout: "int :: 1d100+100",
	schedule_next_action: "schedule(timeout,bind_command(def() change_action))",

	
	#-------------------------- custom death logic --------------------------#
	death_fx_type: "'moth-boss'",
	taxonomy: "TaxonomyType :: enum bug",
	corpse_object_type: "'${me.type}.corpse'",
	death_fx_ignore_damage_type: "true",
	
	#-------------------------- boss HUD stuff --------------------------#
	is_a_boss: { default: true },

	
	#-------------------------- general functions --------------------------#
	setup: "[
		set_max_hitpoints({casual: standard_thrown_damage * 7, challenging: standard_thrown_damage * 11}),
		setup_wind_gust_obj,
		add_object(dash_particles)
		;
		dash_particles.turn_off
	]",	
	
	try_facing: "def(int direction) -> commands if(direction != facing,fire_event('turn'))",
	
	floor_height: "def(int x, int y) -> int|null if(floor_h, floor_h[1], null) where floor_h = _find_floor_standable(x,y,level.player)",

	generate_dive_path: "map(range(10), [value/10.0,sin(18*value)])",

	#-------------------------- attack modes --------------------------#
	enter_mode: "def(string mode, commands command) -> commands [set(_state, mode), command, /*debug(mode+' '+cycle)*/]",
	change_action: "commands <- if(cycle - _last_changed_action > change_action_cooldown_time,
		[
			set(_last_changed_action, cycle),
			if(_state = 'dive_attack_dropdown', enter_mode('dive_attack_charge', start_charge_dive_attack),
				if(_state = 'dive_attack_charge', enter_mode('dive_attack_dash', choose_dive_dash_end_pos),
					if(_state = 'dive_attack_dash', enter_mode('recover_from_dive', choose_dive_recovery_pos),
						if(_state = 'moving_to_prep_windgust', enter_mode('windgust',do_wind_gust_level_behavior),
							if(_state != 'moving', enter_mode('moving',choose_target_pos),
								[
									switch( _behavior_mode_prng.get_next_value, 
										0,	enter_mode('shooting',prepare_shot),
										1,	enter_mode('shooting_homingshot',prepare_homing_shot),
										2,	enter_mode('moving_to_prep_windgust',choose_windgust_target_pos),
										3,	enter_mode('dive_attack_dropdown', choose_dive_dropdown_pos ),
										4,	try_laying_egg,
										5,	try_laying_egg,
										),
									_behavior_mode_prng.iterate_random_pool
								] where try_laying_egg = 
									if(should_lay_egg,
										enter_mode('egg-laying',lay_egg),
										enter_mode('shooting',prepare_shot)
									),
							)
						)
					)
				)
			)
		]
	)",

	choose_first_target_pos: "[ set(_target_x, (flight_bounds.x2 - flight_bounds.x)/2), set(_target_y, flight_bounds.y2)]",

	choose_target_pos: "[	set(_target_x, min(flight_bounds.x, flight_bounds.x2) + 1d(abs(flight_bounds.x2 - flight_bounds.x))),
							if(should_do_high_pass,
								set(_target_y, min(flight_bounds.y, flight_bounds.y2) + 1d(abs(flight_bounds.y2 - flight_bounds.y)/2) ),
								set(_target_y, min(flight_bounds.y, flight_bounds.y2) + 1d(abs(flight_bounds.y2 - flight_bounds.y)/2) + abs(flight_bounds.y2 - flight_bounds.y)/2 ),
							),
							_flight_height_prng.iterate_random_pool
						] where should_do_high_pass = if(_flight_height_prng.get_next_value = 1, true, false)",
									
	
	
#---- general target-seeking ----#
	movement_speed: "switch(_state,
		'dive_attack_dropdown', 100,
		'dive_attack_dash', 200,
		75
	)",

	seek_position: "[
		if(_state = 'dive_attack_dropdown',
			if(not animation in (['dive'] + uninterruptible_animations),
				animation('dive')
			)
		),
		if(midpoint_x < _target_x,
			[
				try_facing(1),
				add(velocity_x, movement_speed),
			],[
				try_facing(-1),
				add(velocity_x,-movement_speed),
			]
		),
		if(midpoint_y < _target_y,
			add(velocity_y, movement_speed),
			add(velocity_y,-movement_speed)
		),
		if(is_at_target, change_action)
	]",
								
	is_at_target: "if(
			(abs(midpoint_x - _target_x) < trigger_distance)
			and
			(abs(midpoint_y - _target_y) < trigger_distance),
		true,
		false
	) where trigger_distance = max(10.0, current_speed/10.0), where current_speed = abs(hypot(velocity_x, velocity_y))",


									
#---- dive attack ----#
	/*
		In the dive attack, we drop straight downwards, and then rapidly zoom horizontally, and then recover back to a normal flight height.
	*/

	dive_end_margin: "int :: if(dash_direction = 1, -300, 500)",

	choose_dive_dropdown_pos: "[
		set(_target_x, if(dash_direction = 1, flight_bounds.x2 + dive_end_margin, flight_bounds.x + dive_end_margin)),
		set(_target_y, level.player.mid_y),
	]",

	start_charge_dive_attack: "[
		schedule(100, bind_command(def() change_action) ),
	]",

	do_charge_dive_processing_behavior: "[
		if(not animation in (['flapfast'] + uninterruptible_animations), animation('flapfast')),
		set(facing, -dash_direction),
	]",

	choose_dive_dash_end_pos: "[
		dash_particles.turn_on,
		set(_target_x, if(dash_direction = 1, flight_bounds.x + dive_end_margin, flight_bounds.x2 + dive_end_margin)),
		set(_target_y, me.mid_y),
	]",

	choose_dive_recovery_pos: "[
		dash_particles.turn_off,
		set(_target_x, if(dash_direction = 1, flight_bounds.x + dive_end_margin, flight_bounds.x2 + dive_end_margin)),
		set(_target_y, flight_bounds.y + (flight_bounds.y2 - flight_bounds.y)/2),
	]",

	dash_direction: "int :: if(mid_x > scene_bounds.x + (scene_bounds.x2 - scene_bounds.x)/2, 1, -1)",

	dash_particles: {
		type: "obj legacy_particle_attache",
		init: "object('legacy_particle_attache', mid_x, mid_y, {
			_particle_type: 'moth_big_trail',
			parent: me,
			time_to_die: 150,

			customized_spawn_rects: [{
				particle_id: 'moth_big_trail',
				rect: [ -20, 20, -100, 100 ],
			}],

			customized_spawn_rates: [{
				particle_id: 'moth_big_trail',
				magnitude: 5000,
			}],

		})",
		persistent: false,
	},



#---- wind gust ----#
	choose_windgust_target_pos: "if(1d2=2,
		[
			set(_target_x, flight_bounds.x), 
			set(_target_y, flight_bounds.y + (flight_bounds.y2 - flight_bounds.y)/2)
		],[
			set(_target_x, flight_bounds.x2), 
			set(_target_y, flight_bounds.y + (flight_bounds.y2 - flight_bounds.y)/2)
		]
	)",

	do_wind_gust_processing_behavior: "[

		if(not animation in (['flapfast'] + uninterruptible_animations), animation('flapfast')),
		if(
			//if we're within the core time slice, during the heavy breeze
			(_last_changed_action + wind_gust_lead_in_time < cycle)
			and
			(_last_changed_action + wind_gust_lead_in_time + wind_gust_core_time > cycle),
			
			if(level.player.is_standing,
				create_strong_gale,
				create_weakened_gale
			)
		)
	]",

	wind_gust_lead_in_time: "int :: 190",
	wind_gust_lead_out_time: "int :: 120",
	wind_gust_core_time: "int :: 500",


	create_weak_breeze: "set(current_generator, rect_current(
			/* x y w h */
		min(scene_bounds.x, scene_bounds.x2),
		min(scene_bounds.y, scene_bounds.y2),
		abs(scene_bounds.x - scene_bounds.x2),
		abs(scene_bounds.y - scene_bounds.y2),
			/* velocity x and y */
		if(mid_x > scene_bounds.x + (scene_bounds.x2 - scene_bounds.x)/2, -800, 800),
		0,
			/* strength */
		500
	))",

	create_strong_gale: "set(current_generator, rect_current(
			/* x y w h */
		min(scene_bounds.x, scene_bounds.x2),
		min(scene_bounds.y, scene_bounds.y2),
		abs(scene_bounds.x - scene_bounds.x2),
		abs(scene_bounds.y - scene_bounds.y2),
			/* velocity x and y */
		if(mid_x > scene_bounds.x + (scene_bounds.x2 - scene_bounds.x)/2, -1600, 1600),
		0,
			/* strength */
		2500
	))",
	
	create_weakened_gale: "set(current_generator, rect_current(
			/* x y w h */
		min(scene_bounds.x, scene_bounds.x2),
		min(scene_bounds.y, scene_bounds.y2),
		abs(scene_bounds.x - scene_bounds.x2),
		abs(scene_bounds.y - scene_bounds.y2),
			/* velocity x and y */
		if(mid_x > scene_bounds.x + (scene_bounds.x2 - scene_bounds.x)/2, -800, 800),
		0,
			/* strength */
		200
	))",

	
	remove_wind: "set(current_generator, null)",

	

	do_wind_gust_level_behavior: "commands :: [
		sound_falloff('moth-boss-wind1.ogg',500,1.0),

		create_weak_breeze,
		_gust_fx_anchor.set_wind_direction(-wind_gust_direction),
		_gust_fx_anchor.set_emission_rate(0.35),
		schedule(wind_gust_lead_in_time, do_wind_gust_level_behavior_core),
	]",
	
	do_wind_gust_level_behavior_core: "commands :: [
		spawn_wind_puffs,
		spawn_rock_projectiles,
		
		create_strong_gale,
		_gust_fx_anchor.set_emission_rate(1.0),
		schedule(wind_gust_core_time, do_wind_gust_level_behavior_leadout),
	]",
	
	do_wind_gust_level_behavior_leadout: "commands :: [
		create_weak_breeze,
		_gust_fx_anchor.set_emission_rate(0.35),
		
		schedule(wind_gust_lead_out_time, bind_command(def() change_action) ),
		schedule(wind_gust_lead_out_time, do_wind_gust_level_behavior_cleanup ),
	]",	

	do_wind_gust_level_behavior_cleanup: "commands :: [
		remove_wind,
		_gust_fx_anchor.set_emission_rate(0.0),

		stop_sound('moth-boss-wind1.ogg'),
		
	]",

	
	spawn_rock_projectiles: "[
		map(
			range(number_of_rock_waves),
			schedule(value*40, [ 
				spawn('rock_flying_harmful',
					rock_mid_x,
					rock_mid_y - (68 * (1d6-1)) + (64*2),
				{
					facing: rock_direction,
					upside_down: if(1d2=2,-1,1),
					velocity_x: 850 * rock_direction,
				}),
			])
		)
	 ]	where number_of_rock_waves = wind_gust_core_time/40,
		where rock_mid_x = if(rock_direction > 0, scene_bounds.x, scene_bounds.x2),
		where rock_mid_y = (flight_bounds.y2 + 164),

		where rock_direction = -wind_gust_direction
	 ",


	spawn_wind_puffs: "[
		map(
			range(number_of_wind_gust_anims),
			schedule(value*3, 
				spawn('wind_gust',
					gust_mid_x-gust_width/2+1d(gust_width),
					gust_mid_y-gust_height/2+1d(gust_height),
				{
					facing:gust_direction,
					upside_down: if(1d2=2,-1,1), animation:'normal'+(1d3-1)
				})
			)
		)
	 ]	where number_of_wind_gust_anims = wind_gust_core_time/3,
		where gust_mid_x = (scene_bounds.x + scene_bounds.x2)/2,
		where gust_mid_y = (scene_bounds.y + scene_bounds.y2 + 512-96)/2,
		where gust_width = (scene_bounds.x2 - scene_bounds.x) + 96*2,
		where gust_height = ((scene_bounds.y2 - scene_bounds.y) + 96*2 + 512 )/2,
		where gust_direction = wind_gust_direction
	 ",

	wind_gust_direction: "int :: if(mid_x > scene_bounds.x + (scene_bounds.x2 - scene_bounds.x)/2, 1, -1)",


	setup_wind_gust_obj: "[
		set(_gust_fx_anchor, wind_obj)
		;
		add_object(_gust_fx_anchor)
	]	where wind_obj = object('moth_boss.gust_fx_anchor', scene_bounds.x, scene_bounds.y, {
		_x_bound: scene_bounds.x,
		_x2_bound: scene_bounds.x2,
		_y_bound: scene_bounds.y,
		_y2_bound: scene_bounds.y2,
	})",





#---- lay egg ----#
	should_lay_egg: "can_lay_egg_at_current_pos and (size(filter(level.chars, value.type in ['moth_boss.egg','moth_small'])) <= 1)",
	lay_egg: "[	
		play_sound__falloff('moth-boss-lay-egg'), schedule(timeout/2, 
			[spawn_egg(50 - 1d50)],
		),
		schedule_next_action
	] where spawn_egg = def(int vel_x) spawn('moth_boss.egg', mid_x, mid_y, {
		time_spat:level.cycle,
		animation:'on_back',
		velocity_x: vel_x,
	})",
	
	can_lay_egg_at_current_pos: "if( floor_height(me.mid_x, me.mid_y), true, false)",
	
	
	
#---- fire shot ----#
	prepare_shot:	"[
		spawn('moth_boss.warning', midpoint_x+32*facing, midpoint_y - 60, {
			facing:facing,
			parent:me,
			relative_x: 32,
			relative_y: -60,
			zorder:lib.zorder.get('in_front_of_everything')
		}),
		sound_falloff('moth-boss-shot'+1d7+'.wav'),
		schedule(30, bind_command(def() launch_shot)), 
		schedule_next_action
	]",
		
	launch_shot: "[
		spawn('moth_boss.flash', midpoint_x+16*facing, midpoint_y - 30, 1),
		spawn('moth_boss.shot',midpoint_x+16*facing, midpoint_y - 30, {
			zorder: lib.zorder.get('in_front_of_everything'),
			velocity_x: max(-300,min(300,((1000*(level.player.x-x))/abs(level.player.y-y)) / 2)),
			velocity_y: max(-300,min(300,((1000*(level.player.y-y))/abs(level.player.x-x)) / 2) )
		})
	]",
					
#---- fire homing shot ----#
	prepare_homing_shot:	"[
		spawn('moth_boss.homing_shot_warning', midpoint_x+32*facing, midpoint_y - 60, {
			facing:facing,
			parent:me,
			relative_x: 32,
			relative_y: -60,
			zorder:lib.zorder.get('in_front_of_everything'),
		}),
		sound_falloff('homing.wav'),
		schedule(30, bind_command(def() launch_homing_shot)), 
		schedule_next_action,
	]",
										
	launch_homing_shot: "[
		spawn('moth_boss.homing_shot_flash', midpoint_x+16*facing, midpoint_y - 30, 1),
		spawn('moth_boss.homing_shot',midpoint_x+16*facing, midpoint_y - 30, {
			zorder: lib.zorder.get('in_front_of_everything')
		})
	]",
	
	
	
#-------------------------- vars --------------------------#
	_last_turned: { type: "int", default: 0, persistent: false },
	_last_changed_action: { type: "int", default: 0, persistent: false },
	_target_x: { type: "int", default: 0, persistent: false },
	_target_y: { type: "int", default: 0, persistent: false },
	_state: { type: "string", default: 'moving', persistent: false },
	behavior: "_state",
	
	_behavior_mode_prng:	{ type: "class pseudo_random_numbers", init: "construct('pseudo_random_numbers',{_size_of_pool:6, _pool_size_multiplier: 1})", persistent: false },
	_flight_height_prng:	{ type: "class pseudo_random_numbers", init: "construct('pseudo_random_numbers',{_size_of_pool:2, _pool_size_multiplier: 2})", persistent: false },

	flight_bounds: { type: "{ x: int, y: int, x2: int, y2: int }", dynamic_initialization: true },
	scene_bounds: { type: "{ x: int, y: int, x2: int, y2: int }", dynamic_initialization: true },

	_gust_fx_anchor: { type: "obj moth_boss.gust_fx_anchor", dynamic_initialization: true },
},

on_create: "[ setup, choose_first_target_pos ]",

#-------------------------- animation switching --------------------------#
on_turn: "if(cycle-_last_turned > 30 and (not animation in ['turn']),[set(_last_turned,cycle),animation('turn')])",
on_leave_turn_anim: "set(facing, -facing)",
on_end_anim: "animation('fly')",

/*
	The boss swaps randomly between several states;  egg-laying, flapping-to-make-wind, and diving, with an additional "cruising" mode for moving to a goal.  Each state has a goal position; randomly placed in the air.  The boss flies to the position, and enters one of the attack states.
*/

on_process: "[
	if(animation = 'fly',
		switch(_state,
			'moving',								seek_position,
			'egg-laying',							null,
			'moving_to_prep_windgust',				seek_position,
			'windgust',								do_wind_gust_processing_behavior,
			'dive_attack_dropdown',					seek_position,
			'dive_attack_dash',						seek_position,
			'recover_from_dive',					seek_position,
			'dive_attack_charge',					do_charge_dive_processing_behavior,
			null
		)
	),
	set(rotate, sin(cycle*7) * 2.0)
]",

editor_info: {
	category: "enemies, forest",
},
animation: [
	{
		"@base": true,
		body_area: "all",
		feet_x: 96,
		feet_y: 152,
		pad: 0,
		rect: [0,0,191,191],
	},
	{
		image: "enemies/moth-boss1.png",
		attack_area: [48,48,143,143],
		id: "fly",
		events:"16:wingflap",
		frames: 8,
		frames_per_row: 4,
		duration: 4,
	},
	{
		image: "enemies/moth-boss1.png",
		id: "flapfast",
		events:"4:wingflap",
		frames: 8,
		frames_per_row: 4,
		duration: 1,
	},
	{
		image: "enemies/moth-boss2.png",
		id: "turn",
		frames: 5,
		duration: 5,
	},
	{
		image: "enemies/moth-boss1.png",
		id: "hurt",
		frames: 1,
		duration: 18,
	},
	{
		image: "enemies/moth-boss1.png",
		id: "dive",
		frames: 1,
		rect: [192,0,383,191],
		duration: -1,
	},
],
object_type: [
	{
		id: "flash",
		zorder: "@include data/zorder.cfg:near_player_foreground_effects",
		dies_on_inactive: true,
		on_end_anim: "die()",
		on_create: "[add_particles('particles'),schedule(4,fire_event('stop_spawning_particles'))]",
		on_stop_spawning_particles: "[set(particle_systems['particles'].spawn_rate, 0),set(alpha,0)]",
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "enemies/moth-big.png",
			rect: [191,83,226,118],
			pad: 3,
			frames: 1,
			duration: 70,
			scale: 4,
		},
		particle_system: {
			id: "particles",
			type: "simple",
			spawn_rate: 8000,
			time_to_live: 40,
			min_x: 18,
			max_x: 20,
			min_y: 18,
			max_y: 20,
			velocity_magnitude: 1000,
			velocity_magnitude_random: 500,
			velocity_rotate_random: 360,
			animation: {
				id: "sparkle",
				image: "enemies/moth-big.png",
				x: 191,
				y: 4,
				w: 7,
				h: 7,
				pad: 3,
				frames: 4,
				duration: 10,
			},
		},
	},
	{
		id: "warning",
		zorder: "@include data/zorder.cfg:near_player_foreground_effects",
		dies_on_inactive: true,
		timer_frequency: 30,
		on_timer: "die()",
		on_end_anim: "animation('normal')",
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "enemies/moth-big.png",
			rect: [191,31,213,53],
			pad: 3,
			frames: 4,
			frames_per_row: 2,
			duration: 2,
			scale: 4,
		},
	},
	{
		id: "homing_shot",
		prototype: ["shot"],
		dies_on_inactive: true,
		is_strict: true,
		affected_by_currents: true,
		object_level_collisions: false,
		properties: {
			attack_damage: "if(higher_difficulty, 3, 2)",
			deflectable_via_attacks: false,

			speed: 300,
			accel_speed: 0.2,
			decay: 0.99,
			multiplier_x: "cos(lib.math.angle(me,target))",
			multiplier_y: "sin(lib.math.angle(me,target))",
			my_angle: "lib.math.angle(me,target)",
			target: "obj player_controlled :: level.player",
			_sound_loop: {
				type: "obj sound_source_individual_attache",
				init: "object('sound_source_individual_attache', mid_x, mid_y, {parent: me, sound_file:'moth-boss-energy-shot.wav', starts_with_sound_on: true})",
				persistent: false,
			},

		},
		on_create: "[add_particles('particles'),schedule(500,die())]",
		on_end_anim: "animation('normal')",
		on_process: "[
						set(velocity_x, median(-speed, velocity_x*decay + multiplier_x*speed*accel_speed, speed)),
						set(velocity_y,median(-speed,velocity_y*decay+multiplier_y*speed*accel_speed,speed)),
					]",
		timer_frequency: 4,
		on_timer: "set(rotate, cycle*10)",
		on_die: "[spawn('moth_boss.homing_shot_flash', midpoint_x, midpoint_y, facing)]",
		
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "enemies/moth-boss-homing-shot.png",
			rect: [1,1,32,32],
			pad: 3,
			frames: 4,
			frames_per_row: 2,
			duration: 2,
			body_area: "all",
			attack_area: [8,8,24,24],
		},
		particle_system: {
			id: "particles",
			type: "simple",
			spawn_rate: 1000,
			time_to_live: 24,
			min_x: 16,
			max_x: 32,
			min_y: 16,
			max_y: 32,
			velocity_magnitude: 1000,
			velocity_magnitude_random: 100,
			velocity_rotate_random: 360,
			animation: {
				id: "sparkle",
				image: "effects/particles2.png",
				x: 1,
				y: 227,
				w: 7,
				h: 7,
				pad: 3,
				frames: 8,
				frames_per_row:4,
				scale: 2,
				duration: 3,
			},
		},
	},
	{
		id: "homing_shot_flash",
		zorder: "@include data/zorder.cfg:near_player_foreground_effects",
		dies_on_inactive: true,
		on_end_anim: "die()",
		on_create: "[add_particles('particles'),schedule(4,fire_event('stop_spawning_particles'))]",
		on_stop_spawning_particles: "[set(particle_systems['particles'].spawn_rate, 0),set(alpha,0)]",
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "enemies/moth-big.png",
			rect: [191,83,226,118],
			pad: 3,
			frames: 1,
			duration: 70,
			scale: 4,
		},
		particle_system: {
			id: "particles",
			type: "simple",
			spawn_rate: 20000,
			time_to_live: 60,
			min_x: 18,
			max_x: 20,
			min_y: 18,
			max_y: 20,
			velocity_magnitude: 2000,
			velocity_magnitude_random: 1000,
			velocity_rotate_random: 360,
			animation: {
				id: "sparkle",
				image: "effects/particles2.png",
				x: 1,
				y: 227,
				w: 7,
				h: 7,
				pad: 3,
				frames: 8,
				frames_per_row:4,
				scale: 2,
				duration: 3,
			},
		},
	},
	{
		id: "homing_shot_warning",
		zorder: "@include data/zorder.cfg:near_player_foreground_effects",
		dies_on_inactive: true,
		timer_frequency: 30,
		on_timer: "die()",
		on_end_anim: "animation('normal')",
		animation: {
			id: "normal",
			image: "enemies/moth-boss-homing-shot.png",
			rect: [69,1,100,32],
			pad: 3,
			frames: 4,
			frames_per_row: 2,
			duration: 2,
		},
	},
	{
		id: "shot",
		prototype: ["shot"],
		dies_on_inactive: true,
		is_strict: true,
		affected_by_currents: true,
		object_level_collisions: true,
		properties: {
			attack_damage: "if(higher_difficulty, 3, 2)",
			deflectable_via_attacks: false,
			
			subshot_speed: "hypot(velocity_x,velocity_y)",
			shot_rotation: "atan(velocity_y/velocity_x) - if(velocity_x < 0, 180, 0)",

			subshot_offset: "def(decimal angle_offset) -> {x: decimal, y: decimal} {x: mid_x + offset[0], y: mid_y + offset[1]} where offset = orbit(0, 0, shot_rotation + angle_offset, mid_y-10-y)",
			subshot_vel: "def(decimal angle_offset) -> {x: decimal, y: decimal} {x: subshot_speed * cos(angle_offset + shot_rotation), y: subshot_speed * sin(angle_offset + shot_rotation)}",
			spawn_individual_subshot: "def(decimal angle_offset) -> commands spawn('moth_big.shot', subshot_offset(angle_offset).x, subshot_offset(angle_offset).y, {rotate: angle_offset, velocity_x: subshot_vel(angle_offset).x, velocity_y: subshot_vel(angle_offset).y})",

			fire_subshots: "[play_sound__falloff('laser-raspberry.wav'), spawn_individual_subshot(-40), spawn_individual_subshot(-20), spawn_individual_subshot(0), spawn_individual_subshot(20), spawn_individual_subshot(40)]",

		},
		on_create: "[add_particles('particles'),schedule(50,die())]",
		on_end_anim: "animation('normal')",
		timer_frequency: 4,
		on_timer: "set(rotate, cycle*10)",
		on_die: "[execute(me,fire_subshots), spawn('moth_big.flash', midpoint_x, midpoint_y, facing)]",
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "enemies/moth-big.png",
			rect: [191,13,205,27],
			pad: 3,
			frames: 2,
			duration: 2,
			reverse: true,
			body_area: "all",
			attack_area: "all",
			scale: 4,
		},
		particle_system: {
			id: "particles",
			type: "simple",
			spawn_rate: 500,
			time_to_live: 40,
			min_x: 0,
			max_x: 20,
			min_y: 0,
			max_y: 20,
			velocity_magnitude: 100,
			velocity_magnitude_random: 100,
			velocity_rotate_random: 360,
			animation: {
				id: "sparkle",
				image: "enemies/moth-big.png",
				x: 191,
				y: 4,
				w: 7,
				h: 7,
				pad: 3,
				frames: 4,
				duration: 10,
			},
		},
	},
	{
		id: "egg",
		prototype: ["throwable_projectile"],
		properties: {
			is_player_ammo: "true",
			title: "~Moth Egg~",
			description: "~I'd prefer a \"Kinder Surprise\", really.~",
			taste: "~Disturbingly moist.~",
		},
		solid_area: [16,16,31,31],

		on_process_on_back: "[
			proto_event('throwable_projectile','process_on_back'),
			if(_on_back_count = (on_back_duration*3)/4,
				sound_falloff('egg-hatch-squishy.wav')
			)
		]",

		on_return_to_normal: "[
			sound_falloff('egg-hatch-crunch'+1d3+'.wav'),
			spawn('moth_small',mid_x,y,{
				facing:facing,
				_x_bound:mid_x-200,
				_x2_bound:mid_x+200,
				_desired_height:y-150-1d100
			},[
				set(child.always_active,true)
			]),
			die()
		]",
		animation: [
		{
			"@base": true,
			image: "enemies/moth-boss-egg.png",
			rect: [0,0,47,47],
			accel_y: 80,
			frames: 1,
			duration: 10,
		},
		{
			id: "normal",
			body_area: "all",
		},
		{
			id: "thrown",
			body_area: null,
			thrown_area: "all",
		},
		{
			id: "on_back",
			body_area: "all",
			thrown_area: null,
		}],
	},
	{
		id: "corpse",
		always_active: true,
		prototype: ["standard_values"],

		on_create: "[sound('moth-boss-screech-death.wav'),set(level.focus, [me]),sinusoidal_transition({period: 200, _init_theta:1.0, _length_theta:-1.0, addend:0, coefficient:255, obj:me, aspect:'alpha'})]",
		
		on_end_anim: "[set(level.focus, []), if(controller, fire_event(controller, 'postfight_outro')) where controller = get_object(level,'begin_fight_controller'), die()]",
		animation: {
			image: "enemies/moth-boss1.png",
			pad: 3,
			feet_x: 96,
			feet_y: 152,
			id: "fly",
			rect: [0,0,191,191],
			accel_y: 1,
			duration: 200,
		},
	},
	{
		id: "perched",
		always_active: true,
		zorder: "@include data/zorder.cfg:forest_leaves_background",
		on_end_anim: "animation(animation)",

		animation: {
			image: "enemies/moth-boss3.png",
			pad: 0,
			feet_x: 96,
			feet_y: 152,
			id: "fly",
			rect: [0,0,191,191],
			duration: 10,
			frames: 3,
			reverse: true,
		},
	},
	{
		id: "gust_fx_anchor",
		always_active: true,
		prototype: ["transient_object"],
		zorder: "@include data/zorder.cfg:forest_leaves_background",
		on_end_anim: "animation(animation)",

		properties: {
#-------------------------- constructors --------------------------#
			transient_obj_constructor: "[
				add_object(wind_stream_particles),
				;
				setup_particles,
				
				//debug(_x_bound, _x2_bound, _y_bound, _y2_bound),
			]",

#-------------------------- variables --------------------------#

			_x_bound: { type: "int", dynamic_initialization: true },
			_x2_bound: { type: "int", dynamic_initialization: true },
			_y_bound: { type: "int", dynamic_initialization: true },
			_y2_bound: { type: "int", dynamic_initialization: true },

			base_emission_rate: { type: "decimal", dynamic_initialization: true },
			set_emission_rate: "def(decimal rate) -> commands 
				//set(wind_stream_particles.emission_rate, {min: 0.75 * base_emission_rate * rate, max: base_emission_rate * rate})
				set(wind_stream_particles.emission_rate, base_emission_rate * rate)
			",
			
			wind_direction_horizontal: { type: "decimal", init: "-1.0" },
			set_wind_direction: "def(decimal wind_direction) -> commands  [
				set(wind_direction_horizontal, wind_direction)
				;
				setup_particles
			]",
			
#-------------------------- fx --------------------------#
			wind_stream_particles: { 
				type: "obj particle_attache", 
				init: "object('particle_attache', x,y, {
					_particle_type:'wind_stream', //Silence check for this existing. `particles`, which this sets, is overwritten later.
					parent: me,
					time_to_die: 0,
					x:x, y:y,
					zorder: lib.zorder.get('liquid_particle_effects'),
				})",
				persistent: false,
			},

			setup_particles: "commands :: [
//				set(wind_stream_particles.clip_area, [_x_bound-mid_x, _y_bound-mid_y, _x2_bound - _x_bound, _y2_bound - _y_bound, ]),
				
				set(base_emission_rate, emission_scale_factor),
				
				set(wind_stream_particles.particles, (
					raw_particle_system_info + {
						position: [
							(_x_bound + _x2_bound)/2 - mid_x, //Horizontal offset of particle system as wide as the water, to handle when the emitter object isn't square within the bounds of the water.
							(_y_bound + _y2_bound)/2 - mid_y, //
							0
						],
						emitter: (map <- raw_particle_system_info.emitter) + {
							time_to_live: bubble_average_lifetime, //Make the bubbles live until the top of the water.
							box_height: _y2_bound - _y_bound, //Make the bubbles as tall as the water. (To position the bubbles, see `position` above.)
							box_width: _x2_bound - _x_bound, //Make the bubbles as wide as the water. (To position the bubbles, see `position` above.)
							emission_rate: (map <- (map <- raw_particle_system_info.emitter).emission_rate) + {
								min: 0, //emission_scale_factor * 0.75, 
								max: 0, //emission_scale_factor
							}
						},
						affector: map((list <- raw_particle_system_info.affector),
							if((map <- value).type = 'linear_force',
								(map <- value) + {direction: [wind_direction_horizontal,0.0,0.0]},
								value
							)
						)
					}
				)),
			] where
				emission_scale_factor =
					((_x2_bound - _x_bound) / 1000.0) * 500,
				raw_particle_system_info = 
					(ParticleSystemInfo <- get_document('data/particles/wind_stream.cfg')).info,
				bubble_average_lifetime = 
					(_y2_bound - _y_bound) / average_vertical_bubble_speed / 60/*fps*/
					where average_vertical_bubble_speed = 1.0 //totally made-up value.
							",

		},
		
		animation: {
			id: "normal",
			image: "effects/particles.png",
			x: 86, y: 73, w: 28, h: 28,
			duration: -1,
		},
	},
	
],
}
