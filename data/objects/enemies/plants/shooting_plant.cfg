{
id: "shooting_plant",
prototype: ["movable_enemy"],
hitpoints: 50,

solid_area: [5,8,19,21],
editor_info: {
	category: "enemies, seaside",
},

properties: {
	hurt_velocity_x: "0",
	points_value: "8",
	taxonomy: "TaxonomyType :: enum plant",
	
	title: "~Shooting Plant~",
	description: "~Finally, a daisy that can shoot back!~",
	taste: "~Oily, kind of mineral-y, not good at all. Way twitchier than a plant should be.~",

	shoot_at: "def({x: int, y: int} target) -> commands
		[
			//spawn('text_flash',midpoint_x,midpoint_y-40,{ txt: '' + lead_time_prediction, font: 'white_outline' }),
			sound_falloff('pollen-shot.wav'),
			spawn('shooting_plant.pollen_ball',
				midpoint_x + 20 * facing,
				midpoint_y - 12,
				facing,
			[
				set(child.velocity_x, shotVel[0]),
				set(child.velocity_y, shotVel[1])
			])
		]

		where shotVel = orbit(0, 0, angle-90, lib.math.constrain(250, shotVector, 650)),
		where shotVector = sqrt(abs((0.5*gravity*x^2*(tan(angle)^2+1))/(x*tan(angle)-y)))
		where
			gravity = 2000,
			angle = 45*self.facing, //Something needs to be jiggered for this to work at different angles.
			x = target.x-(midpoint_x+20*facing),
			y = (midpoint_y-12)-target.y",
	shoot_unaimed: "commands :: [play_sound__falloff('pollen-shot.wav'),spawn('shooting_plant.pollen_ball', midpoint_x+20*facing, midpoint_y-12, facing, [set(child.velocity_x, 300*facing), set(child.velocity_y, -500)])]",
	springiness: "160",

	distance_to_player: "lib.math.length(me, level.player)",
	x_distance_to_player: "int :: abs(mid_x - level.player.mid_x)",
	y_distance_to_player: "int :: abs(mid_y - level.player.mid_y)",

	/*
		Some funky math going on for the prediction:

		1] a coefficient to account for the quite constant amount of time the projectile takes to fly upwards, and then fall down to the same height it spawned at.
		2] a slight exponent to account for the *accelerative* nature of gravity; the fall speed gets a bit faster over time
		3] a scaling factor to normalize the scales of distance and time

		This is all just a wild estimate, and that's fine for these guys to actually feel somewhat inaccurate, especially at a distance.
	*/
	lead_time_prediction: "int :: lib.math.round(23 + (y_distance_to_player/4.4) ^ 0.89)",

	predicted_player_mid: "{x: int, y: int} ::
		if(level.player is obj frogatto_playable,
			(obj frogatto_playable <- level.player).position_predictor.prediction(lead_time_prediction),
			{x: level.player.mid_x, y: level.player.mid_y},
		)",
},


#-------------------------- animation switching --------------------------#
on_end_stand_anim: "if(not is_facing_towards_player, turn_around, animation('shoot'))",
on_end_shoot_anim: "animation('stand')",
on_end_spring_anim: "animation('stand')",
on_shoot: "shoot_at(predicted_player_mid)",
on_end_hurt_anim: "animation('stand')",


animation: [
	{
		"@base": true,
		image: "enemies/plant-shooting.png",
		pad: 3,
		body_area: "all",
		accel_y: 80,
	},
	{
		id: "stand",
		duplicates: 6,
		rect: [2,29,28,52],
		frames: 1,
		duration: 30,
	},
	{
		id: "stand",
		#blink variant
		rect: [93,29,119,52],
		frames: 1,
		duration: 30,
	},
	{
		id: "shoot",
		rect: [2,2,28,25],
		frames: 8,
		duration: 6,
		events: "40:shoot",
	},
	{
		id: "turn",
		rect: [2,56,28,79],
		frames: 3,
		duration: 10,
	},
	{
		id: "spring",
		rect: [93,56,119,79],
		frames: 4,
		duration: 5,
	},
	{
		id: "hurt",
		rect: [2,83,28,106],
		frames: 2,
		duration: 15,
	},
],
object_type: [
		{
			id: "thrown",
			prototype: ["throwable_small_enemy"],
			properties: {
				taxonomy: "TaxonomyType :: enum plant",
			},
			solid_area: [5,8,19,21],
			
			//The helicopter plant becomes a standard shooting plant when you eat it. Remove its rotor if it has gifted us one.
			on_been_grabbed: "
				if(rotor, set(rotor.hitpoints, 0))
					where rotor = find(spawned_children, value is obj helicopter_plant.rotor)",
			
			animation: [
				{
					image: "enemies/plant-shooting.png",
					id: "thrown",
					rect: [93,83,119,106],
					frames: 2,
					duration: 5,
					thrown_area: "all",
					body_area: null,
				},
				{
					image: "enemies/plant-shooting.png",
					id: "on_back",
					rect: [93,83,119,106],
					frames: 2,
					duration: 5,
					thrown_area: null,
					body_area: "all",
				},
			],
		},
		
		
		{
			id: "pollen_ball",
			always_active: true,
			affected_by_currents: false,
			object_level_collisions: true,
			prototype: ["shot"],

			properties: {
				death_effects: "def(string type) -> commands [
					spawn('pollen_impact_particle',mid_x,mid_y,0),
					play_sound__falloff('Seed-fall'),
					//spawn('text_flash',midpoint_x,midpoint_y-40,{ txt: '' + me.cycle, font: 'white_outline' }),
				]",
			},

			on_create: "[
				spawn('particle_attache', {
					_particle_type: 'seaside_shooting_plant_sparkles',
					x: mid_x,
					y: mid_y,
					parent: me,
					time_to_die: 200,
				}),
			]",


			timer_frequency: 4,
			on_timer: "set(rotate, cycle*10)",
			on_end_anim: "force_death()",
			animation: {
				id: "normal",
				image: "enemies/shooting-plant.png",
				rect: [90,2,100,12],
				frames: 1,
				duration: 250,
				velocity_x: 0,
				accel_y: 20,
				body_area: "all",
				attack_area: "all",
			},
		},

	],
}
