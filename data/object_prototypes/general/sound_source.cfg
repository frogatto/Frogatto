{
id: "sound_source",
always_active: true,
is_strict: true,

types: {
	AttenuationFunc: "function(decimal)->decimal",
},

properties: {
	sound_distance: "def(obj sound_source source, obj player_controlled receiver, decimal addend_x=0.0, decimal addend_y=0.0) -> decimal
 		max(
 			abs(source.mid_x - (receiver.mid_x + addend_x)),
 			abs(source.mid_y - (receiver.mid_y + addend_y))
 		)",



	
	// we have a variety of different functions to make the sounds trail off over a distance;
	// some sounds need to shut up quickly when you pass by, others should carry a long way.
	_falloff_distance: "decimal ::  decimal(_sound_defaults[sound_file].falloff_distance)",

	_attenuate_linearly: "def(decimal distance) -> decimal (_falloff_distance - distance) / _falloff_distance",

	_attenuate_inverse: "def(decimal distance) -> decimal (_falloff_distance/ max(1.0,distance/1.1) )",  //falloff dist here is the point at which it dips below 1, since the point it actually reaches zero is infinitely far away

	distance_attenuation_function: "def(decimal distance) -> decimal 
			switch(_sound_defaults[sound_file].distance_attenuation_function,
				enum linearly, _attenuate_linearly(distance),
				_attenuate_inverse(distance)
			)",
	
	//this is the core function that decides how loud we are.
	sound_volume_multiplier: "def(obj sound_source source, obj player_controlled receiver) -> decimal
		max(_sound_volume_scale_cache.min, 
			min(1.0,distance_attenuation_function(sound_distance(source, receiver) ))
				- (1 - _sound_volume_scale_cache.max))
		* _sound_current_volume * manually_adjusted_sound_volume",
	
	_sound_volume_scale_cache: {
		type: "{min: decimal, max: decimal}",
		init: "{min: 0, max: 0}",
	},
	
	
	sound_enable: "[set(sound_enabled, true), fire_event('create')]",
	sound_disable: "[set(sound_enabled, false), fire_event('die')]",
	
	sound_fade_in: "_sound_fade(true)",
	sound_fade_out: "_sound_fade(false)",
	_sound_fade: "def(mode) -> commands
		map(
			if(mode, range(sfd), reverse(range(sfd))),
			schedule(value, set(_sound_current_volume, (value+1)/sfd))
			) where sfd = decimal(sound_fade_duration)",
			
	_sound_coordinator_existing: "find(filter(level.chars, value is obj sound_source_coordinator), value.sound_file = sound_file)",
			
	_sound_new_coordinator: "[
		set(_sound_coordinator, the_coordinator),
		add_object(the_coordinator),
		] where the_coordinator = object('sound_source_coordinator', 10, 10, {monitoring: [me], sound_file: sound_file})",
		
	_sound_volume_scale: "{min: decimal, max: decimal} ::
		if(preset_volume, {
			min: sound_volume_min, 
			max: preset_volume * sound_volume_max,
		},{
			min: sound_volume_min,
			max: sound_volume_max,
		}) where preset_volume = if(_sound_defaults[sound_file], _sound_defaults[sound_file].sound_volume_max)",
		
	_sound_defaults: { type: "{string -> {sound_volume_max: decimal, distance_attenuation_function: enum {linearly, inverse}, falloff_distance: decimal}}", default:{
		'ambient/squeakygearsturning.ogg': {
			sound_volume_max: 0.7,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 400,
			},

		'ambient/boiling-pot.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 400,
			},
		'ambient/oceansurf.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
			},
		'ambient/fan.ogg': {
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 1500,
		},
		'ambient/ocean.ogg': {
			sound_volume_max: 0.6,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 1000,
		},
		'ambient/oceansurfunderwater.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		'alarm-loop.ogg': {
			sound_volume_max: 1.00,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/fireplace-gas.ogg': {
			sound_volume_max: 0.35,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		'ambient/metal-squeak.ogg': {
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 150,
		},
		'ambient/circular-saw.wav': {
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		'ambient/rain-meditative.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/acid.ogg': {
			sound_volume_max: 0.45,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 175,
		},
		'ambient/fireplace.ogg': {
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 1000,
		},
		'ambient/river-heavy.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/bog.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/fountain-large.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/torch.ogg': {
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		'ambient/breeze-crickets.ogg': {
			sound_volume_max: 0.35,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/fountain-medium.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/waterfall-heavy.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/brook-cave.ogg': {
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		'ambient/moist-underground.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/fountain-small.ogg': {
			sound_volume_max: 0.35,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/wind-blustery.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/brook-heavy.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/fridge.ogg': {
			sound_volume_max: 0.4,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		'ambient/wind-leaves.ogg': {
			sound_volume_max: 0.9,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/brook-light.ogg': {
			sound_volume_max: 0.35,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/house-creaking.ogg': {
			sound_volume_max: 0.30,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/house-interior-seaside.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/cave.ogg': {
			sound_volume_max: 1.0,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'ambient/mech.ogg': {
			sound_volume_max: 0.35,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		'ambient/machine-air-conditioner.ogg': {
			sound_volume_max: 0.5,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		'ambient/energy-hum.wav': {
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		'ambient/space-glow.wav': {
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		'extended-laser.wav': {
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'gazer-mini-aggro-loop.wav': {
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 150,
		},
		'gazer-spin-loop.wav': {
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 150,
		},
		'fuse-long.ogg': {
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'thwump-retract-loop.wav': {
			sound_volume_max: 1,
			distance_attenuation_function: "@eval enum inverse",
			falloff_distance: 600,
		},
		'moth-boss-energy-shot.wav': {
			sound_volume_max: 0.65,
			distance_attenuation_function: "@eval enum linearly",
			falloff_distance: 600,
		},
		
	}, set: "null /*cannot set this, is immutable!*/" },
	
	sound_fade_duration: "15", 			//Fade in/out frame duration.
#-------------------------- temp vars --------------------------#
	_sound_coordinator: { type: "obj sound_source_coordinator|null", dynamic_initialization: false, persistent: false },
	_sound_current_volume: { type: "decimal", default: 0, persistent: false },			//Internal counter, for use with fading in/out. Ranges between 1 and 0.
	sound_enabled: { type: "bool", default: true, persistent: false },				//Prefer using the accessor properties, sound_enable/sound_disable, unless you haven't added the object yet.

#-------------------------- vars --------------------------#
	manually_adjusted_sound_volume: { type: "decimal", default: 1.0 },	//in rare cases, we want to manually manipulate a sound's volume (for example; turning it up-and-down as the source of the sound modulates in strength).  Rather than being a global setting for all copies of a sound, this is meant for individual source instances.
	
	sound_file: { type: "string", default: "", editor_info: { type: "enum", enum_values: "@eval map(get_files_in_dir('sounds/ambient'), 'ambient/'+value)" } },

	sound_volume_min: { type: "decimal", default: 0.0 },				//Endpoints for volume scale are defined by 'min' and 'max'.
	sound_volume_max: { type: "decimal", default: 1.0 },
},

	
on_load: "[if(sound_file != '' and sound_enabled,
	if(coordinator, [coordinator.add(me),set(_sound_coordinator, coordinator)], _sound_new_coordinator)
		where coordinator = _sound_coordinator_existing
	),
	sound_fade_in,
	set(_sound_volume_scale_cache, _sound_volume_scale),
]
	asserting sound_file in _sound_defaults | 'all ambient sounds must have an entry in the sound_source prototype'
",
	
on_being_removed: "if(_sound_coordinator, _sound_coordinator.remove(me))",  

}
