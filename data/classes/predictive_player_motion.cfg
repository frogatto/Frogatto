{
	constructor: "prepump_player_history",

	_player_history: {type: "[[decimal]]", default: []}, //[x,y,vel_x,vel_y,cycle]
	
	pump_player_history: "commands :: set(_player_history, ([new_player_history] + _player_history)[:_number_of_frames_in_history])",
	new_player_history: "[decimal] <- closest_player.mid_xy+closest_player_vel+[current_level().cycle]",
	prepump_player_history: "commands :: set(_player_history, [new_player_history] * _number_of_frames_in_history)",

	closest_player_vel: "[decimal, decimal] <- [ vel[0] /100, vel[1] /100] where vel = closest_player.velocity_xy",
	
	
	prediction: "def(int number_of_frames_to_look_ahead) -> {x:int, y:int}
								{
									x: current_level().player.mid_x - (inv_pred[0] - current_level().player.mid_x),
									y: current_level().player.mid_y - (inv_pred[1] - current_level().player.mid_y)
								} where inv_pred = inverse_prediction( min(number_of_frames_to_look_ahead, _number_of_frames_in_history) )",
	
	inverse_prediction: "def(int number_of_frames_to_look_ahead) -> [int, int] predict_from(
		map(fold(_player_history[:samples], zip(map(a, lib.math.round(value)),map(b, lib.math.round(value)))), (int<-value)/samples)
	) asserting size(_player_history) >= samples | q(It's not possible to sample further back in history than we've actually recorded)  
	where samples = number_of_frames_to_look_ahead",
	
	_number_of_frames_in_history: { type:"int", default:100 },
	
	predict_from: "def([int] hist) -> [int, int] [
		hist[0]+(hist[2]*(this_obj.cycle-hist[4]))/100,
		hist[1]+(hist[3]*(this_obj.cycle-hist[4]))/100
	]",


	closest_player: "obj player_controlled_platformer_character <- the_player",
	/*closest_player: "obj player_controlled_platformer_character <- 
		sort(current_level().players, lib.math.length(this_obj, a) < lib.math.length(this_obj, b))[0]",*/
	
	the_player: { type: "obj player_controlled_platformer_character", dynamic_initialization: true },
	this_obj: { type: "custom_obj", dynamic_initialization: true }	
}

/*
	This class creates a history tracker that records the player's motion across N cycles, and allows someone to query this history at a given offset.  This is usually flipped around the player to instead provide a prediction of the future, rather than a history.  The typical use-case of this class is to allow enemies to lead their shots; frogatto is very fast, and unless an enemy attack has obscenely fast motion, it's almost certain to miss the player and end up behind where the player is, if the player's in motion.  Frogatto's a fairly unusual game in that the titular character moves really fast, and we've long had a problem where lots of enemy designs that would work in almost any other platformer are easily defeated in frogatto by just running past them.

	This is a bit of a catch-22, because the design point of having really liberating, fast free-motion is non-negotiable; it's one of the cornerstone goals we were founded on.  We wanted to buck typical platformer physics partly for innovation's sake, but also partly because they've always felt a bit *wrong* and artifical, somehow.  This prediction tool is one of the big guns we're bringing out to try and crack this problem.

	To use this, you need to 1]create an instance of the class (because it internally needs to store the history record to sample from).  2] in on_process, you need to evaluate one command to record the current frame's position (and dump the oldest item in the queue).  Any object is then free to query this data via the "prediction" call.  Besides needing to be done separately due to being pure functional, they also need to be separate because there's a many->one relation of potential parties reading this value, and the one object creating it (generally a bunch of monsters all aiming at one player).
*/

/*  example usage:
properties: {
	_player_pos_predictor: { type: "class predictive_player_motion", init: "construct('predictive_player_motion',{current_level(): level, this_obj: me, the_player: level.player})", persistent: false }
}

on_process: "[
				_player_pos_predictor.pump_player_history,
				set(mid_xy, _player_pos_predictor.prediction(30))
			]",
*/
